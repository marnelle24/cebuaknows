// This is your Prisma schema file for Places and related entities
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // For production with Supabase, change provider to "postgresql"
  // provider = "postgresql"
}

// Role Model
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique // 'user', 'publisher', 'administrator'
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

// User Model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String?   // Optional for OAuth users
  firstName     String?
  lastName      String?
  roleId        Int       @default(1) // Default to 'user' role
  role          Role      @relation(fields: [roleId], references: [id])
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth.js required fields
  name          String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  
  // Place-related relationships
  reviews       Review[]
  favorites     Favorite[]

  @@index([email])
  @@index([username])
  @@index([roleId])
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Category Model - stores services from location page
model Category {
  id          Int      @id @default(autoincrement())
  query       String   @unique // URL-friendly identifier (e.g., 'hotels', 'coffee-shops')
  label       String   // Display name (e.g., 'Hotels', 'Coffee Shops')
  keyphrase   String   // SEO keyphrase (e.g., 'top-hotels', 'top-coffee-shops')
  description String?  // Description of the category
  icon        String?  // Icon name or identifier
  color       String?  // Color theme (e.g., 'from-blue-500 to-blue-600')
  prompt      String?  // AI prompt template for this category
  isActive    Boolean  @default(true)
  displayOrder Int     @default(0) // For ordering in UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  places      Place[]

  @@index([query])
  @@index([isActive])
}

// Location Model - represents cities/regions
model Location {
  id          Int      @id @default(autoincrement())
  name        String   @unique // e.g., 'cebu', 'oslob', 'bohol'
  displayName String   // e.g., 'Cebu', 'Oslob', 'Bohol'
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  places      Place[]

  @@index([name])
  @@index([isActive])
}

// Place Model - main entity for places/businesses
model Place {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // URL-friendly identifier
  description String
  address     String?
  phone       String?
  website     String?
  hours       String?  // Operating hours
  priceRange  String?  // e.g., '₱100 - ₱500'
  highlights  String?  // Key features
  rating      Float?   // Average rating
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  locationId  Int
  categoryId  Int

  // Relationships
  location    Location   @relation(fields: [locationId], references: [id])
  category    Category   @relation(fields: [categoryId], references: [id])
  images      PlaceImage[]
  amenities   PlaceAmenity[]
  reviews     Review[]
  favorites   Favorite[]

  @@index([slug])
  @@index([locationId])
  @@index([categoryId])
  @@index([isActive])
  @@index([rating])
}

// Place Image Model - stores multiple images per place
model PlaceImage {
  id        Int      @id @default(autoincrement())
  url       String   // Image URL or path
  alt       String?  // Alt text for accessibility
  caption   String?  // Image caption
  order     Int      @default(0) // Display order
  isPrimary Boolean  @default(false) // Primary image
  createdAt DateTime @default(now())

  // Foreign Key
  placeId   String
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@index([placeId])
  @@index([order])
}

// Amenity Model - stores available amenities
model Amenity {
  id          Int      @id @default(autoincrement())
  name        String   @unique // e.g., 'WiFi', 'Pool', 'Parking'
  description String?
  icon        String?  // Icon identifier
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  places      PlaceAmenity[]

  @@index([name])
  @@index([isActive])
}

// Place Amenity Pivot Table - many-to-many relationship
model PlaceAmenity {
  id        Int     @id @default(autoincrement())
  placeId   String
  amenityId Int

  // Relationships
  place     Place   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@unique([placeId, amenityId])
  @@index([placeId])
  @@index([amenityId])
}

// Review Model - user reviews for places
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 star rating
  comment   String?  // Review text
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  placeId   String
  userId    String

  // Relationships
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([placeId])
  @@index([userId])
  @@index([rating])
  @@index([createdAt])
}

// Favorite Model - user favorites
model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Foreign Keys
  placeId   String
  userId    String

  // Relationships
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([placeId, userId])
  @@index([placeId])
  @@index([userId])
}

// Business Hours Model - detailed operating hours
model BusinessHours {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  openTime  String?  // e.g., '09:00'
  closeTime String?  // e.g., '17:00'
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Key
  placeId   String
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([placeId, dayOfWeek])
  @@index([placeId])
  @@index([dayOfWeek])
}

// Contact Information Model - additional contact details
model ContactInfo {
  id        Int      @id @default(autoincrement())
  type      String   // 'email', 'phone', 'social', 'other'
  value     String   // Contact value
  label     String?  // Display label
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  // Foreign Key
  placeId   String
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@index([placeId])
  @@index([type])
}

// SEO Model - for search optimization
model SEO {
  id          Int      @id @default(autoincrement())
  title       String?  // SEO title
  description String?  // Meta description
  keywords    String?  // SEO keywords
  canonical   String?  // Canonical URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Key
  placeId     String
  place       Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([placeId])
  @@index([placeId])
}
